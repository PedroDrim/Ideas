getTable = function(yql, queryDateTime = T){
yql = gsub(" ","%20",yql)
jsonResp = fromJSON(yql)
table = jsonResp$query$results$quote
table = as.data.table(table)
if(queryDateTime){
queryDateTime = jsonResp$query$created
queryDateTime = gsub("Z", "", queryDateTime)
queryDateTime = gsub("T", " ", queryDateTime)
table$queryDateTime = queryDateTime
}
return(table)
}
#=================================================#
)
)
load.datas()
keys = c("YHOO","AAPL","MSFT","GOOG")
create.InitialSequence = function(keys, arquivo, quantidade, extrapolatedMinute = 0){
persistenceObject = PersistenceClass$new(arquivo)
requestObject = RequestClass$new()
for(i in 1:quantidade){
first = (i == 1)
tabela = requestObject$getValues.now(keys)
browser()
persistenceObject$serializeTable(tabela, first)
Sys.sleep(60)
}
tabelaFinal = persistenceObject$deserializeTable()
if(extrapolatedMinute > 0){
neuralObject = NeuralClass$new(tabelaFinal)
for(key in keys){
index = which(tabelaFinal$symbol == key)
tabelaFinal.short = tabelaFinal[index, c(1,7), with = F]
qdt = strptime(tabelaFinal.short$queryDateTime, "%Y-%m-%d %H:%M:%S")
dateTimeInicial = max(qdt) + 60
dateTimeFinal = dateTimeInicial + (extrapolatedMinute * 60)
dateTimeInicial = as.character(dateTimeInicial)
dateTimeFinal = as.character(dateTimeFinal)
dataSimulated = neuralObject$use(dateTimeInicial, dateTimeFinal, key)
dataSimulated$queryDateTime = as.character(dataSimulated$queryDateTime)
persistenceObject$serializeTable(dataSimulated, F)
}
}
}
create.InitialSequence(keys, "dadosBolsa.csv", 30, 30)
View(tabela)
RequestClass = R6Class("RequestClass",
public = list(
#=================================================#
getValues.now = function(keys){
keys_string = paste0(keys, collapse = "','")
base = "https://query.yahooapis.com/v1/public/yql?"
query = sprintf("q=select symbol,Name,Currency,Bid,Ask,LastTradePriceOnly from yahoo.finance.quotes where symbol in ('%s')&",keys_string)
format = "format=json&env=store%3A%2F%2Fdatatables.org%2Falltableswithkeys&callback="
yql = paste0(base, query, format)
action.table = private$getTable(yql)
order.name = c("symbol","Name","Currency","Bid","Ask","LastTradePriceOnly","queryDateTime")
action.table = action.table[,order.name, with = F]
action.table$type = "observed"
names(action.table) = c("Simbolo", "Nome", "Moeda", "MaximoCompra", "MinimoVenda", "UltimoValor",
"HoraRequisicao", "Tipo")
return(action.table)
},
#=================================================#
#=================================================#
getValues.historical = function(keys, dataInicio, dataFim){
browser()
dataInicio = as.character(dataInicio)
dataFim = as.character(dataFim)
keys_string = paste0(keys, collapse = "','")
base = "https://query.yahooapis.com/v1/public/yql?"
query = sprintf("q=select * from yahoo.finance.historicaldata where symbol in ('%s') and startDate = '%s' and endDate = '%s'&",keys_string ,dataInicio, dataFim)
format = "format=json&env=store%3A%2F%2Fdatatables.org%2Falltableswithkeys&callback="
yql = paste0(base, query, format)
historical.table = private$getTable(yql)
historical.table$type = "observed"
return(historical.table)
}
#==================================================#
),
private = list(
#=================================================#
getTable = function(yql, queryDateTime = T){
yql = gsub(" ","%20",yql)
jsonResp = fromJSON(yql)
table = jsonResp$query$results$quote
table = as.data.table(table)
if(queryDateTime){
queryDateTime = jsonResp$query$created
queryDateTime = gsub("Z", "", queryDateTime)
queryDateTime = gsub("T", " ", queryDateTime)
table$queryDateTime = queryDateTime
}
return(table)
}
#=================================================#
)
)
a = RequestClass$new()
keys = c("YHOO","GOOG")
a$getValues.now(keys)
RequestClass = R6Class("RequestClass",
public = list(
#=================================================#
getValues.now = function(keys){
keys_string = paste0(keys, collapse = "','")
base = "https://query.yahooapis.com/v1/public/yql?"
query = sprintf("q=select symbol,Name,Currency,Bid,Ask,LastTradePriceOnly from yahoo.finance.quotes where symbol in ('%s')&",keys_string)
format = "format=json&env=store%3A%2F%2Fdatatables.org%2Falltableswithkeys&callback="
yql = paste0(base, query, format)
action.table = private$getTable(yql)
order.name = c("symbol","Name","Currency","Bid","Ask","LastTradePriceOnly","queryDateTime")
action.table = action.table[,order.name, with = F]
action.table$type = "observed"
return(action.table)
},
#=================================================#
#=================================================#
getValues.historical = function(keys, dataInicio, dataFim){
dataInicio = as.character(dataInicio)
dataFim = as.character(dataFim)
keys_string = paste0(keys, collapse = "','")
base = "https://query.yahooapis.com/v1/public/yql?"
query = sprintf("q=select * from yahoo.finance.historicaldata where symbol in ('%s') and startDate = '%s' and endDate = '%s'&",keys_string ,dataInicio, dataFim)
format = "format=json&env=store%3A%2F%2Fdatatables.org%2Falltableswithkeys&callback="
yql = paste0(base, query, format)
historical.table = private$getTable(yql)
historical.table$type = "observed"
return(historical.table)
}
#==================================================#
),
private = list(
#=================================================#
getTable = function(yql, queryDateTime = T){
yql = gsub(" ","%20",yql)
jsonResp = fromJSON(yql)
table = jsonResp$query$results$quote
table = as.data.table(table)
if(queryDateTime){
queryDateTime = jsonResp$query$created
queryDateTime = gsub("Z", "", queryDateTime)
queryDateTime = gsub("T", " ", queryDateTime)
table$queryDateTime = queryDateTime
}
return(table)
}
#=================================================#
)
)
a = RequestClass$new()
keys = c("YHOO","GOOG")
a$getValues.now(keys)
# http://www.investopedia.com/terms/b/bid-and-asked.asp
# https://www.google.com/finance?q=OTCMKTS%3ASSNNF&ei=AA8mWNn0FeSDiQLn3rl4
#==========================================================#
load.datas = function(){
require(curl)
require(neuralnet)
require(jsonlite)
require(data.table)
require(R6)
require(dygraphs)
require(xts)
arquivos = list.files("src",full.names = T)
status = sapply(arquivos, source)
gc()
}
#==========================================================#
#==========================================================#
create.InitialSequence = function(keys, arquivo, quantidade, extrapolatedMinute = 0){
persistenceObject = PersistenceClass$new(arquivo)
requestObject = RequestClass$new()
for(i in 1:quantidade){
first = (i == 1)
tabela = requestObject$getValues.now(keys)
browser()
persistenceObject$serializeTable(tabela, first)
Sys.sleep(60)
}
tabelaFinal = persistenceObject$deserializeTable()
if(extrapolatedMinute > 0){
neuralObject = NeuralClass$new(tabelaFinal)
for(key in keys){
index = which(tabelaFinal$symbol == key)
tabelaFinal.short = tabelaFinal[index, c(1,7), with = F]
qdt = strptime(tabelaFinal.short$queryDateTime, "%Y-%m-%d %H:%M:%S")
dateTimeInicial = max(qdt) + 60
dateTimeFinal = dateTimeInicial + (extrapolatedMinute * 60)
dateTimeInicial = as.character(dateTimeInicial)
dateTimeFinal = as.character(dateTimeFinal)
dataSimulated = neuralObject$use(dateTimeInicial, dateTimeFinal, key)
dataSimulated$queryDateTime = as.character(dataSimulated$queryDateTime)
persistenceObject$serializeTable(dataSimulated, F)
}
}
}
#==========================================================#
load.datas()
keys = c("YHOO","AAPL","MSFT","GOOG")
quantidade = 4
create.InitialSequence(keys, "dadosBolsa.csv", quantidade, quantidade/2)
# http://www.investopedia.com/terms/b/bid-and-asked.asp
# https://www.google.com/finance?q=OTCMKTS%3ASSNNF&ei=AA8mWNn0FeSDiQLn3rl4
#==========================================================#
load.datas = function(){
require(curl)
require(neuralnet)
require(jsonlite)
require(data.table)
require(R6)
require(dygraphs)
require(xts)
arquivos = list.files("src",full.names = T)
status = sapply(arquivos, source)
gc()
}
#==========================================================#
#==========================================================#
create.InitialSequence = function(keys, arquivo, quantidade, extrapolatedMinute = 0){
persistenceObject = PersistenceClass$new(arquivo)
requestObject = RequestClass$new()
for(i in 1:quantidade){
first = (i == 1)
tabela = requestObject$getValues.now(keys)
persistenceObject$serializeTable(tabela, first)
Sys.sleep(60)
}
tabelaFinal = persistenceObject$deserializeTable()
if(extrapolatedMinute > 0){
neuralObject = NeuralClass$new(tabelaFinal)
for(key in keys){
index = which(tabelaFinal$symbol == key)
tabelaFinal.short = tabelaFinal[index, c(1,7), with = F]
qdt = strptime(tabelaFinal.short$queryDateTime, "%Y-%m-%d %H:%M:%S")
dateTimeInicial = max(qdt) + 60
dateTimeFinal = dateTimeInicial + (extrapolatedMinute * 60)
dateTimeInicial = as.character(dateTimeInicial)
dateTimeFinal = as.character(dateTimeFinal)
dataSimulated = neuralObject$use(dateTimeInicial, dateTimeFinal, key)
dataSimulated$queryDateTime = as.character(dataSimulated$queryDateTime)
persistenceObject$serializeTable(dataSimulated, F)
}
}
}
#==========================================================#
load.datas()
keys = c("YHOO","AAPL","MSFT","GOOG")
quantidade = 4
create.InitialSequence(keys, "dadosBolsa.csv", quantidade, quantidade/2)
dadosBolsa = fread("dadosBolsa.csv")
#dygraphObject = DygraphClass$new()
#dygraphObject$getPlot(keys, "Bid", 50, dadosBolsa, simulated = F)
View(dadosBolsa)
install.packages("ggplot2")
shiny::runApp()
install.packages(c("curl", "neuralnet", "data.table"))
load.datas()
set_data = function(){
arquivo = "dados.csv"
persisteceObject = PersistenceClass$new()
requestObject = RequestClass$new()
keys = c("YHOO","AAPL","GOOG","MSFT")
exist = file.exists(arquivo)
values = requestObject$getValues.now(keys)
persisteceObject$serializeTable(values, !exist)
return(values)
}
set_data()
set_data()
runApp()
set_data = function(){
arquivo = "dados.csv"
persisteceObject = PersistenceClass$new(arquivo)
requestObject = RequestClass$new()
keys = c("YHOO","AAPL","GOOG","MSFT")
exist = file.exists(arquivo)
values = requestObject$getValues.now(keys)
persisteceObject$serializeTable(values, !exist)
return(values)
}
set_data()
set_data()
set_data()
set_data()
set_data()
set_data()
load.datas()
keys = c("YHOO","AAPL","MSFT","GOOG")
quantidade = 4
# http://www.investopedia.com/terms/b/bid-and-asked.asp
# https://www.google.com/finance?q=OTCMKTS%3ASSNNF&ei=AA8mWNn0FeSDiQLn3rl4
#==========================================================#
load.datas = function(){
require(curl)
require(neuralnet)
require(jsonlite)
require(data.table)
require(R6)
require(ggplot2)
arquivos = list.files("src",full.names = T)
status = sapply(arquivos, source)
gc()
}
#==========================================================#
#==========================================================#
create.InitialSequence = function(keys, arquivo, quantidade, extrapolatedMinute = 0){
persistenceObject = PersistenceClass$new(arquivo)
requestObject = RequestClass$new()
for(i in 1:quantidade){
first = (i == 1)
tabela = requestObject$getValues.now(keys)
persistenceObject$serializeTable(tabela, first)
Sys.sleep(60)
}
tabelaFinal = persistenceObject$deserializeTable()
if(extrapolatedMinute > 0){
neuralObject = NeuralClass$new(tabelaFinal)
for(key in keys){
index = which(tabelaFinal$symbol == key)
tabelaFinal.short = tabelaFinal[index, c(1,7), with = F]
qdt = strptime(tabelaFinal.short$queryDateTime, "%Y-%m-%d %H:%M:%S")
dateTimeInicial = max(qdt) + 60
dateTimeFinal = dateTimeInicial + (extrapolatedMinute * 60)
dateTimeInicial = as.character(dateTimeInicial)
dateTimeFinal = as.character(dateTimeFinal)
dataSimulated = neuralObject$use(dateTimeInicial, dateTimeFinal, key)
dataSimulated$queryDateTime = as.character(dataSimulated$queryDateTime)
persistenceObject$serializeTable(dataSimulated, F)
}
}
}
#==========================================================#
load.datas()
keys = c("YHOO","AAPL","MSFT","GOOG")
quantidade = 4
create.InitialSequence(keys, "dadosBolsa.csv", quantidade, quantidade/2)
dadosBolsa = fread("dadosBolsa.csv")
#dygraphObject = DygraphClass$new()
#dygraphObject$getPlot(keys, "Bid", 50, dadosBolsa, simulated = F)
View(dadosBolsa)
index = which(dadosBolsa$symbol == "YHOO")
x = dadosBolsa[index]
plot(1:7, x$Bid)
plot(1:7, x$Bid, type = "l")
plot(1:7, x$Bid, type = "b")
plot(1:7, x$Ask, type = "b")
plot(1:7, x$LastTradePriceOnly, type = "b")
x$LastTradePriceOnly
# http://www.investopedia.com/terms/b/bid-and-asked.asp
# https://www.google.com/finance?q=OTCMKTS%3ASSNNF&ei=AA8mWNn0FeSDiQLn3rl4
#==========================================================#
load.datas = function(){
require(curl)
require(neuralnet)
require(jsonlite)
require(data.table)
require(R6)
require(ggplot2)
arquivos = list.files("src",full.names = T)
status = sapply(arquivos, source)
gc()
}
#==========================================================#
#==========================================================#
create.InitialSequence = function(keys, arquivo, quantidade, extrapolatedMinute = 0){
persistenceObject = PersistenceClass$new(arquivo)
requestObject = RequestClass$new()
for(i in 1:quantidade){
first = (i == 1)
tabela = requestObject$getValues.now(keys)
persistenceObject$serializeTable(tabela, first)
Sys.sleep(60)
}
tabelaFinal = persistenceObject$deserializeTable()
if(extrapolatedMinute > 0){
neuralObject = NeuralClass$new(tabelaFinal)
for(key in keys){
index = which(tabelaFinal$symbol == key)
tabelaFinal.short = tabelaFinal[index, c(1,7), with = F]
qdt = strptime(tabelaFinal.short$queryDateTime, "%Y-%m-%d %H:%M:%S")
dateTimeInicial = max(qdt) + 60
dateTimeFinal = dateTimeInicial + (extrapolatedMinute * 60)
dateTimeInicial = as.character(dateTimeInicial)
dateTimeFinal = as.character(dateTimeFinal)
dataSimulated = neuralObject$use(dateTimeInicial, dateTimeFinal, key)
dataSimulated$queryDateTime = as.character(dataSimulated$queryDateTime)
persistenceObject$serializeTable(dataSimulated, F)
}
}
}
#==========================================================#
load.datas()
keys = c("YHOO","AAPL","MSFT","GOOG","BIDU","FB","IBM","TWTR")
quantidade = 10
create.InitialSequence(keys, "dadosBolsa.csv", quantidade, quantidade/2)
# http://www.investopedia.com/terms/b/bid-and-asked.asp
# https://www.google.com/finance?q=OTCMKTS%3ASSNNF&ei=AA8mWNn0FeSDiQLn3rl4
#==========================================================#
load.datas = function(){
require(curl)
require(neuralnet)
require(jsonlite)
require(data.table)
require(R6)
require(ggplot2)
arquivos = list.files("src",full.names = T)
status = sapply(arquivos, source)
gc()
}
#==========================================================#
#==========================================================#
create.InitialSequence = function(keys, arquivo, quantidade, extrapolatedMinute = 0){
persistenceObject = PersistenceClass$new(arquivo)
requestObject = RequestClass$new()
for(i in 1:quantidade){
first = (i == 1)
tabela = requestObject$getValues.now(keys)
persistenceObject$serializeTable(tabela, first)
Sys.sleep(60)
}
tabelaFinal = persistenceObject$deserializeTable()
if(extrapolatedMinute > 0){
neuralObject = NeuralClass$new(tabelaFinal)
for(key in keys){
index = which(tabelaFinal$symbol == key)
tabelaFinal.short = tabelaFinal[index, c(1,7), with = F]
qdt = strptime(tabelaFinal.short$queryDateTime, "%Y-%m-%d %H:%M:%S")
dateTimeInicial = max(qdt) + 60
dateTimeFinal = dateTimeInicial + (extrapolatedMinute * 60)
dateTimeInicial = as.character(dateTimeInicial)
dateTimeFinal = as.character(dateTimeFinal)
dataSimulated = neuralObject$use(dateTimeInicial, dateTimeFinal, key)
dataSimulated$queryDateTime = as.character(dataSimulated$queryDateTime)
persistenceObject$serializeTable(dataSimulated, F)
}
}
}
#==========================================================#
load.datas()
arquivo = "output//dadosBolsa.csv"
keys = c("YHOO","AAPL","MSFT","GOOG","BIDU","FB","IBM","TWTR","HPQ")
quantidade = 10
create.InitialSequence(keys, arquivo, quantidade, quantidade/2)
dadosBolsa = fread(arquivo)
#dygraphObject = DygraphClass$new()
#dygraphObject$getPlot(keys, "Bid", 50, dadosBolsa, simulated = F)
View(dadosBolsa)
i = keys[1]
a = dadosBolsa[dadosBolsa$symbol == a,]
a = dadosBolsa[dadosBolsa$symbol == i,]
View(a)
plot(x = 1:dim(a)[1], a$LastTradePriceOnly)
plot(x = 1:dim(a)[1], a$Bid)
plot(x = 1:dim(a)[1], a$Ask)
shiny::runApp()
shiny::runApp()
runApp()
load.datas()
arquivo = "output//dadosBolsa.csv"
keys = c("YHOO","AAPL","MSFT","GOOG","BIDU","FB","IBM","TWTR","HPQ")
persisteceObject = PersistenceClass$new(arquivo)
requestObject = RequestClass$new()
exist = file.exists(arquivo)
load.datas
exist = file.exists(arquivo)
values = requestObject$getValues.now(keys)
persisteceObject$serializeTable(values, !exist)
graphObject = GraphClass$new()
graphObject = GraphClass$new()
set_data()
set_data = function(){
arquivo = "output//dadosBolsa.csv"
keys = c("YHOO","AAPL","MSFT","GOOG","BIDU","FB","IBM","TWTR","HPQ")
persisteceObject = PersistenceClass$new(arquivo)
requestObject = RequestClass$new()
exist = file.exists(arquivo)
values = requestObject$getValues.now(keys)
persisteceObject$serializeTable(values, !exist)
}
set_data()
tabela.ini = fread("output//dadosBolsa.csv")
View(tabela.ini)
View(tabela.ini)
runApp()
a = fread("output//dadosBolsa.csv")
View(a)
sum(:100)
sum(1:100)
install.packages(c("neuralnet", "jsonlite", "curl", "data.table", "R6", "ggplot2", "shiny", "shinydashboard"))
shiny::runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
